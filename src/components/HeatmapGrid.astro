---
import { getColor, getAnimationStyle } from "@utils/heatmapUtils";

export interface Props {
  distanceData: [number, number][];
  minDistance: number;
  maxDistance: number;
}

const { distanceData, minDistance, maxDistance } = Astro.props;

// Enhanced color function with better contrast
function getEnhancedColor(value: number, min: number, max: number) {
  if (value === 0) return 'bg-slate-900/20 border-slate-700/30';

  const intensity = (value - min) / (max - min);

  if (intensity < 0.2) return 'bg-emerald-900/40 border-emerald-700/50 shadow-emerald-900/20';
  if (intensity < 0.4) return 'bg-emerald-800/60 border-emerald-600/70 shadow-emerald-800/30';
  if (intensity < 0.6) return 'bg-emerald-700/70 border-emerald-500/80 shadow-emerald-700/40';
  if (intensity < 0.8) return 'bg-emerald-600/80 border-emerald-400/90 shadow-emerald-600/50';
  return 'bg-emerald-500/90 border-emerald-300 shadow-emerald-500/60';
}

// Helper functions to generate dynamic labels
function getWeekdayLabels() {
  return ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"];
}

function getMonthLabels(data: [number, number][]) {
  const monthLabels: { label: string; column: number }[] = [];
  let previousMonth = -1;
  let previousYear = -1;

  data.forEach((entry, index) => {
    const date = new Date(entry[0]);
    const currentMonth = date.getMonth();
    const currentYear = date.getFullYear();
    const column = Math.floor(index / 7);

    if (currentMonth !== previousMonth || currentYear !== previousYear) {
      const monthLabel = date.toLocaleDateString("en-US", { month: "short" });
      monthLabels.push({ label: monthLabel, column });

      previousMonth = currentMonth;
      previousYear = currentYear;
    }
  });

  return monthLabels.filter((month, index) => {
    if (index === 0) return true;
    return month.column - monthLabels[index - 1].column >= 2;
  });
}

const weekdayLabels = getWeekdayLabels();
const monthLabels = getMonthLabels(distanceData);
const totalWeeks = Math.ceil(distanceData.length / 7);
---

<div class="relative w-full max-w-full p-6 bg-gradient-to-br from-slate-950 via-slate-900 to-emerald-950/30 rounded-xl border border-emerald-500/20 shadow-2xl shadow-emerald-900/20 overflow-hidden">

  <!-- Matrix digital rain effect -->
  <div class="absolute inset-0 opacity-5 pointer-events-none">
    <div class="absolute top-0 left-1/4 w-px h-full bg-gradient-to-b from-transparent via-emerald-400 to-transparent animate-pulse"></div>
    <div class="absolute top-0 left-2/4 w-px h-full bg-gradient-to-b from-transparent via-emerald-400 to-transparent animate-pulse" style="animation-delay: 1s;"></div>
    <div class="absolute top-0 left-3/4 w-px h-full bg-gradient-to-b from-transparent via-emerald-400 to-transparent animate-pulse" style="animation-delay: 2s;"></div>
  </div>

  <!-- Glowing corner accents -->
  <div class="absolute top-0 left-0 w-20 h-20 bg-emerald-500/10 rounded-full blur-xl"></div>
  <div class="absolute bottom-0 right-0 w-32 h-32 bg-emerald-400/10 rounded-full blur-2xl"></div>

  <div class="relative grid grid-cols-[auto_1fr] grid-rows-[auto_1fr] gap-3">

    <!-- Month Labels -->
    <div class="col-span-2 grid gap-2 h-6 ml-8 relative">
      {monthLabels.map(({ label, column }) => (
        <div
          class="absolute text-emerald-400/80 text-xs font-bold font-mono tracking-wider hover:text-emerald-300 transition-colors duration-300"
          style={{
            left: `${(column * 100) / totalWeeks}%`,
            top: '0'
          }}
        >
          {label}
        </div>
      ))}
    </div>

    <!-- Weekday Labels -->
    <div class="grid grid-rows-7 gap-0.5 w-7 pr-1">
      {weekdayLabels.map((day, index) => (
        <div class="text-emerald-400/70 text-xs font-mono font-semibold text-right flex items-center justify-end h-full hover:text-emerald-300 transition-colors duration-300">
          {day}
        </div>
      ))}
    </div>

    <!-- Main Heatmap Grid -->
    <div
      class="grid grid-rows-7 grid-flow-col gap-0.5 w-full min-h-[140px] relative"
      style={{ gridTemplateColumns: `repeat(${totalWeeks}, 1fr)` }}
    >
      {distanceData.map((data, index) => {
        const style = getAnimationStyle(index);
        const hasActivity = data[1] > 0;
        const colorClasses = getEnhancedColor(data[1], minDistance, maxDistance);
        const intensityLevel = hasActivity ? Math.min(Math.floor(((data[1] - minDistance) / (maxDistance - minDistance)) * 5) + 1, 5) : 0;

        return (
          <div
            class={`
              group relative aspect-square min-w-3 min-h-3 rounded-sm border cursor-pointer
              transition-all duration-300 ease-out transform scale-0
              hover:scale-125 hover:z-50 hover:rotate-1 hover:shadow-lg
              ${colorClasses}
              ${hasActivity ? 'hover:shadow-emerald-400/50' : 'hover:shadow-slate-400/30'}
              ${intensityLevel >= 4 ? 'animate-pulse' : ''}
            `}
            style={{
              animation: `scaleIn 0.3s ease-out ${style.animationDelay} forwards`,
              animationDelay: style.animationDelay,
            }}
          >

            {/* Glow effect for high activity */}
            {intensityLevel >= 3 && (
              <div class="absolute inset-0 rounded-sm bg-emerald-400/20 blur-sm scale-150 group-hover:bg-emerald-300/30 transition-all duration-300"></div>
            )}

            {/* Activity indicator dot */}
            {hasActivity && (
              <div class={`
                absolute top-0.5 right-0.5 w-1 h-1 rounded-full
                ${intensityLevel >= 4 ? 'bg-emerald-300 shadow-emerald-300/50 shadow-sm' : 'bg-emerald-500/60'}
                group-hover:scale-150 transition-transform duration-300
              `}></div>
            )}

            {/* Matrix-style tooltip */}
            <div class="absolute bottom-full left-1/2 transform -translate-x-1/2 mb-3 opacity-0 group-hover:opacity-100 transition-all duration-300 pointer-events-none z-50">
              <div class="bg-slate-900/95 backdrop-blur-sm border border-emerald-500/50 text-emerald-300 text-xs px-3 py-2 rounded-lg shadow-xl shadow-emerald-900/50 font-mono whitespace-nowrap">
                <div class="flex items-center gap-2 mb-1">
                  <div class="w-1.5 h-1.5 bg-emerald-400 rounded-full animate-pulse"></div>
                  <div class="text-emerald-400/80 text-xs">
                    {new Date(data[0]).toLocaleDateString("en-US", {
                      year: "numeric",
                      month: "short",
                      day: "numeric",
                    })}
                  </div>
                </div>
                <div class="text-emerald-300 font-semibold">
                  {data[1] > 0
                    ? `${(data[1] / 1000).toFixed(2)} km`
                    : "No activity"}
                </div>

                {/* Tooltip arrow */}
                <div class="absolute top-full left-1/2 transform -translate-x-1/2 border-4 border-transparent border-t-slate-900/95"></div>
              </div>
            </div>

            {/* Hover ripple effect */}
            <div class="absolute inset-0 rounded-sm opacity-0 group-hover:opacity-100 bg-emerald-400/10 group-hover:animate-ping transition-opacity duration-300"></div>
          </div>
        );
      })}
    </div>
  </div>

  <!-- Scanning line effect -->
  <div class="absolute inset-0 pointer-events-none overflow-hidden">
    <div class="absolute top-0 left-0 w-full h-0.5 bg-gradient-to-r from-transparent via-emerald-400/30 to-transparent transform -skew-x-12 animate-scan"></div>
  </div>
</div>

<style>
  @keyframes scaleIn {
    from {
      transform: scale(0);
      opacity: 0;
    }
    to {
      transform: scale(1);
      opacity: 1;
    }
  }

  @keyframes scan {
    0% {
      transform: translateY(-100vh) skewX(-12deg);
      opacity: 0;
    }
    10% {
      opacity: 1;
    }
    90% {
      opacity: 1;
    }
    100% {
      transform: translateY(100vh) skewX(-12deg);
      opacity: 0;
    }
  }

  .animate-scan {
    animation: scan 8s linear infinite;
  }

  /* Responsive adjustments */
  @media (max-width: 768px) {
    .min-h-\[140px\] {
      min-height: 120px;
    }
  }

  @media (max-width: 640px) {
    .min-h-\[140px\] {
      min-height: 100px;
    }
  }

  @media (max-width: 480px) {
    .min-h-\[140px\] {
      min-height: 80px;
    }
  }
</style>