---
import type { Workout, Exercise, Set } from "@services/hevyService"; // Import the Workout interface
import {
  formatDuration,
  formatRelativeTime,
  formatWorkoutDateTime,
  roundToOneDecimal,
  kgToLbs,
} from "@utils/formatUtils";

// Define the component's props
export interface Props {
  workout: Workout;
}

const { workout } = Astro.props;

// Use the passed workout prop directly
const displayWorkout = workout;

// Calculate summary data
const workoutDurationSeconds =
  (new Date(displayWorkout.end_time).getTime() -
    new Date(displayWorkout.start_time).getTime()) /
  1000;
const totalSets = displayWorkout.exercises.reduce(
  (sum, ex) => sum + ex.sets.length,
  0,
);
const totalVolumeKg = displayWorkout.exercises.reduce((sum, ex) => {
  return (
    sum +
    ex.sets.reduce(
      (exSum, set) => exSum + (set.weight_kg || 0) * (set.reps || 0),
      0,
    )
  );
}, 0);

const workoutStartedAtDate = new Date(displayWorkout.start_time);
const formattedWorkoutDateTime = formatWorkoutDateTime(workoutStartedAtDate);
const relativeWorkoutTime = formatRelativeTime(workoutStartedAtDate);
const workoutDateTimeInfo = `${formattedWorkoutDateTime} [${relativeWorkoutTime}]`;

const lastUpdated = formatRelativeTime(new Date(displayWorkout.updated_at));
---

<div
  class="hevy-workout-card bg-black text-green-400 font-mono p-3 sm:p-4 rounded-md border border-green-700 shadow-md shadow-green-500/20 max-w-2xl mx-auto"
>
  <header class="mb-4">
    <h3
      class="text-xl sm:text-2xl font-semibold text-green-300 [text-shadow:0_0_5px_theme(colors.green.500),0_0_10px_theme(colors.green.700)]"
    >
      {displayWorkout.title}
    </h3>
    <p class="text-xs sm:text-sm text-green-500">{formattedWorkoutDateTime}</p>
    {
      displayWorkout.description && (
        <p class="text-xs sm:text-sm mt-1 italic text-green-600">
          {displayWorkout.description}
        </p>
      )
    }
  </header>

  <section>
    <h4
      class="text-lg font-medium text-green-300 mb-2 border-b border-green-700 pb-1"
    >
      Exercises
    </h4>
    <ul class="space-y-4 overflow-y-auto max-h-64 sm:max-h-72">
      {
        displayWorkout.exercises.map((exercise, index) => (
          <li class="border border-green-800 p-3 rounded-md bg-green-900/10">
            <div class="flex justify-between items-center mb-2">
              {() => {
                let exerciseName = exercise.exercise_type_id;
                let machineType = "";
                if (
                  typeof exercise.exercise_type_id === "string" &&
                  exercise.exercise_type_id.includes("[") &&
                  exercise.exercise_type_id.includes("]")
                ) {
                  const parts = exercise.exercise_type_id.split("[");
                  exerciseName = parts[0].trim();
                  machineType = parts[1].replace("]", "").trim();
                }
                return (
                  <h5 class="text-md sm:text-lg font-semibold text-green-300">
                    {exerciseName}
                    {machineType && (
                      <span class="text-sm text-green-400">
                        {" "}
                        [{machineType}]
                      </span>
                    )}
                  </h5>
                );
              }}
              {exercise.notes && (
                <p class="text-xs text-green-500 italic hidden md:block">
                  {exercise.notes}
                </p>
              )}
            </div>
            <ul class="mt-1 space-y-1.5 pl-2 sm:pl-4">
              {exercise.sets.map((set, setIndex) => (
                <li class="text-xs sm:text-sm flex flex-wrap gap-x-3">
                  <span class="text-green-500 mr-1">Set {setIndex + 1}:</span>
                  <span>
                    <span class="text-green-600">Wt:</span>{" "}
                    {set.weight_kg != null
                      ? `${roundToOneDecimal(set.weight_kg)}kg / ${kgToLbs(set.weight_kg)}lbs`
                      : "--"}
                  </span>
                  <span>
                    <span class="text-green-600">Reps:</span>{" "}
                    {set.reps != null ? `${set.reps}` : "--"}
                  </span>
                  {set.distance_km != null && (
                    <span>
                      <span class="text-green-600">Dist:</span>{" "}
                      {set.distance_km}km
                    </span>
                  )}
                  {set.duration_seconds != null && (
                    <span>
                      <span class="text-green-600">Time:</span>{" "}
                      {formatDuration(set.duration_seconds)}
                    </span>
                  )}
                  {set.rpe != null && (
                    <span class="text-green-500 hidden sm:inline">
                      RPE: {set.rpe}
                    </span>
                  )}
                  {set.notes && (
                    <p
                      class="text-xs text-green-700 italic w-full mt-0.5 truncate"
                      title={set.notes}
                    >
                      {set.notes}
                    </p>
                  )}
                </li>
              ))}
            </ul>
          </li>
        ))
      }
    </ul>
  </section>

  <footer class="mt-4 pt-4 border-t border-green-700 text-xs sm:text-sm">
    <p>
      <span class="text-green-500 font-semibold">Duration:</span>
      {formatDuration(workoutDurationSeconds)}
    </p>
    <p>
      <span class="text-green-500 font-semibold">Total Volume:</span>
      {
        totalVolumeKg.toLocaleString(undefined, {
          maximumFractionDigits: 0,
          minimumFractionDigits: 0,
        })
      } kg
    </p>
    <p>
      <span class="text-green-500 font-semibold">Total Sets:</span>
      {totalSets}
    </p>
  </footer>
</div>
