---
import { getColor, getTooltipContent, getAnimationStyle } from "@utils/heatmapUtils";
import { formatMileage } from "@services/stravaService";

export interface Props {
  mileageData: [number, number][];
  minMiles: number;
  maxMiles: number;
}

const { mileageData, minMiles, maxMiles } = Astro.props;
---

<div class="heatmap-grid">
  {mileageData.map((data, index) => {
    const style = getAnimationStyle(index);
    const hasActivity = data[1] > 0;
    const backgroundColor = getColor(data[1], minMiles, maxMiles);
    const tooltipContent = getTooltipContent(data, formatMileage);

    return (
      <div class={`
        aspect-square border border-green-500/20 relative cursor-pointer
        transition-all duration-300 hover:scale-125 hover:z-10
        hover:shadow-lg hover:shadow-green-400/50 hover:border-green-400
        active:scale-95 group overflow-hidden
        ${hasActivity ? 'hover:animate-pulse' : ''}
      `}
      style={{
        backgroundColor,
        transform: 'scale(0)',
        animation: style.animation,
        animationDelay: style.animationDelay,
        boxShadow: hasActivity ? `inset 0 0 10px ${backgroundColor}40` : 'none',
      }}>
        {/* Digital noise overlay for active cells */}
        {hasActivity && (
          <div class="absolute inset-0 opacity-30 digital-noise"></div>
        )}

        {/* Matrix-style tooltip */}
        {data[1] !== -1 && (
          <div class="absolute bottom-full left-1/2 transform -translate-x-1/2 mb-3
                     bg-black/95 backdrop-blur-sm border border-green-500/60
                     text-green-400 text-xs py-3 px-4 rounded-md whitespace-nowrap
                     pointer-events-none opacity-0 group-hover:opacity-100
                     transition-all duration-300 z-20 hidden md:block
                     shadow-xl shadow-green-500/30 font-mono">
            <div class="text-green-300 mb-1 text-xs">[DATA_STREAM]</div>
            <div class="text-green-400">{tooltipContent}</div>
            <div class="absolute top-full left-1/2 transform -translate-x-1/2
                       border-4 border-transparent border-t-green-500/60"></div>
          </div>
        )}
      </div>
    );
  })}
</div>

<style>
  .heatmap-grid {
    display: grid;
    grid-template-rows: repeat(7, 1fr);
    grid-template-columns: repeat(53, 1fr);
    grid-auto-flow: column;
    gap: 4px;
    width: 100%;
    height: 100%;
    aspect-ratio: 53/7;
    padding: 20px;
    background: radial-gradient(ellipse at center, rgba(0, 255, 0, 0.03) 0%, rgba(0, 0, 0, 0.8) 70%);
    border-radius: 8px;
    border: 1px solid rgba(0, 255, 0, 0.2);
    position: relative;
  }

  .digital-noise {
    background-image:
      radial-gradient(circle at 20% 50%, rgba(0, 255, 0, 0.2) 0%, transparent 50%),
      radial-gradient(circle at 80% 50%, rgba(0, 255, 0, 0.2) 0%, transparent 50%),
      radial-gradient(circle at 40% 80%, rgba(0, 255, 0, 0.15) 0%, transparent 50%);
    animation: digitalNoise 2s ease-in-out infinite alternate;
  }

  @keyframes digitalNoise {
    0% { opacity: 0.1; filter: hue-rotate(0deg); }
    100% { opacity: 0.3; filter: hue-rotate(90deg); }
  }

  /* Responsive adjustments */
  @media (max-width: 1024px) {
    .heatmap-grid {
      gap: 3px;
      padding: 16px;
    }
  }

  @media (max-width: 768px) {
    .heatmap-grid {
      gap: 2px;
      padding: 14px;
    }
  }

  @media (max-width: 680px) {
    .heatmap-grid {
      grid-template-columns: repeat(26, 1fr);
      aspect-ratio: 26/7;
      gap: 2px;
      padding: 12px;
    }
  }

  @media (max-width: 480px) {
    .heatmap-grid {
      padding: 10px;
      gap: 1px;
    }
  }
</style>