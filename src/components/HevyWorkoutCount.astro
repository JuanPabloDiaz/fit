---
export interface Props {
  workoutCount: number;
}

const { workoutCount } = Astro.props;
---

<div class="workout-count-container">
  <div class="workout-count-wrapper">
    <!-- Matrix-style workout count display -->
    <div class="workout-count-display">
      <div class="count-grid">
        <div class="count-label">
          <span class="text-green-400/60 text-sm font-mono"
            >TOTAL_WORKOUTS:</span
          >
        </div>
        <div class="count-value">
          <span
            class="text-green-300 text-4xl font-mono font-bold tracking-wider"
          >
            {(workoutCount || 0).toString().padStart(4, "0")}
          </span>
        </div>
      </div>

      <!-- Matrix rain effect elements -->
      <div class="matrix-rain">
        {
          Array.from({ length: 12 }).map((_, i) => (
            <div
              class={`rain-column rain-column-${i + 1}`}
              style={`animation-delay: ${i * 0.3}s;`}
            >
              {Array.from({ length: 8 }).map((_, j) => (
                <span class="rain-char">{Math.floor(Math.random() * 2)}</span>
              ))}
            </div>
          ))
        }
      </div>
    </div>

    <!-- Status indicators -->
    <div class="workout-status mt-6">
      <div class="grid grid-cols-1 md:grid-cols-3 gap-4 text-xs">
        <div class="status-block">
          <span class="text-green-400/60">API_STATUS:</span>
          <span class="text-green-300 ml-2 flex items-center">
            <div class="w-1 h-1 bg-green-500 rounded-full mr-1 animate-pulse">
            </div>
            CONNECTED
          </span>
        </div>
        <div class="status-block">
          <span class="text-green-400/60">DATA_SOURCE:</span>
          <span class="text-green-300 ml-2">HEVY_API_V1</span>
        </div>
        <div class="status-block">
          <span class="text-green-400/60">SYNC_STATUS:</span>
          <span class="text-green-300 ml-2">REAL_TIME</span>
        </div>
      </div>
    </div>
  </div>
</div>

<style>
  /* Workout Count Container Styles - Matrix Green Theme */
  .workout-count-container {
    background: linear-gradient(
      135deg,
      rgba(0, 0, 0, 0.9) 0%,
      rgba(0, 20, 0, 0.7) 100%
    );
    border: 1px solid rgba(0, 255, 0, 0.3);
    border-radius: 8px;
    padding: 24px;
    box-shadow:
      0 0 25px rgba(0, 255, 0, 0.2),
      inset 0 0 25px rgba(0, 255, 0, 0.05);
    position: relative;
    overflow: hidden;
  }

  .workout-count-container::before {
    content: "";
    position: absolute;
    inset: -1px;
    border-radius: 9px;
    padding: 1px;
    background: linear-gradient(
      45deg,
      rgba(0, 255, 0, 0.4),
      transparent,
      rgba(0, 255, 0, 0.4)
    );
    mask:
      linear-gradient(#fff 0 0) content-box,
      linear-gradient(#fff 0 0);
    mask-composite: xor;
    animation: workoutBorderGlow 3s ease-in-out infinite;
  }

  @keyframes workoutBorderGlow {
    0%,
    100% {
      opacity: 0.4;
    }
    50% {
      opacity: 0.9;
    }
  }

  .workout-count-wrapper {
    position: relative;
    z-index: 2;
  }

  .workout-count-display {
    position: relative;
    display: flex;
    align-items: center;
    justify-content: center;
    min-height: 120px;
    background: rgba(0, 0, 0, 0.6);
    border: 1px solid rgba(0, 255, 0, 0.2);
    border-radius: 6px;
    overflow: hidden;
  }

  .count-grid {
    text-align: center;
    z-index: 3;
    position: relative;
  }

  .count-value {
    margin-top: 8px;
    text-shadow:
      0 0 10px rgba(0, 255, 0, 0.8),
      0 0 20px rgba(0, 255, 0, 0.5),
      0 0 30px rgba(0, 255, 0, 0.3);
    animation: countPulse 2s ease-in-out infinite;
  }

  @keyframes countPulse {
    0%,
    100% {
      transform: scale(1);
      opacity: 0.9;
    }
    50% {
      transform: scale(1.05);
      opacity: 1;
    }
  }

  /* Matrix Rain Effect */
  .matrix-rain {
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    pointer-events: none;
    overflow: hidden;
  }

  .rain-column {
    position: absolute;
    top: -100%;
    font-family: "Courier New", monospace;
    font-size: 12px;
    color: rgba(0, 255, 0, 0.3);
    animation: matrixRain 4s linear infinite;
    white-space: nowrap;
  }

  .rain-char {
    display: block;
    line-height: 1.2;
    animation: charFlicker 0.5s ease-in-out infinite;
  }

  @keyframes matrixRain {
    0% {
      transform: translateY(-100%);
      opacity: 0;
    }
    10% {
      opacity: 1;
    }
    90% {
      opacity: 1;
    }
    100% {
      transform: translateY(calc(100vh + 100%));
      opacity: 0;
    }
  }

  @keyframes charFlicker {
    0%,
    100% {
      opacity: 0.3;
    }
    50% {
      opacity: 0.8;
    }
  }

  /* Position rain columns */
  .rain-column-1 {
    left: 5%;
  }
  .rain-column-2 {
    left: 12%;
  }
  .rain-column-3 {
    left: 19%;
  }
  .rain-column-4 {
    left: 26%;
  }
  .rain-column-5 {
    left: 33%;
  }
  .rain-column-6 {
    left: 40%;
  }
  .rain-column-7 {
    left: 47%;
  }
  .rain-column-8 {
    left: 54%;
  }
  .rain-column-9 {
    left: 61%;
  }
  .rain-column-10 {
    left: 68%;
  }
  .rain-column-11 {
    left: 75%;
  }
  .rain-column-12 {
    left: 82%;
  }

  .workout-status {
    font-family: "Courier New", monospace;
  }

  .status-block {
    padding: 8px 12px;
    background: rgba(0, 255, 0, 0.05);
    border: 1px solid rgba(0, 255, 0, 0.1);
    border-radius: 4px;
    display: flex;
    align-items: center;
    justify-content: space-between;
  }

  /* Responsive Design */
  @media (max-width: 768px) {
    .workout-count-container {
      padding: 16px;
    }

    .count-value span {
      font-size: 2.5rem;
    }

    .workout-status .grid {
      grid-template-columns: 1fr;
      gap: 8px;
    }
  }
</style>
